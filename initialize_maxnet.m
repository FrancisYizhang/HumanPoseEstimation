function net = initialize_maxnet()
%INITIALIZELARGECNN  Initialize a large CNN for text deblurring
%   NET = INITIALIZELARGECNN() returns the SimpleNN model NET.

net.meta.inputSize = [220 220 3 1] ;

net.layers = { } ;

id = 0;

id = id + 1;
net.layers{end+1} = struct(...
    'name', sprintf('conv%d', id), ...
    'type', 'conv', ...
    'weights', {xavier(11,11,3,96)}, ...
    'stride', 4, ...
    'pad', 5, ...
    'learningRate', [1 2], ...
    'weightDecay', [1 0]) ;
net.layers{end+1} = struct('type', 'relu', 'name', sprintf('relu%d',id)) ;

net.layers{end+1} = struct(...
    'name', sprintf('norm%d', id), ...
    'type', 'normalize', ...
    'param', [5 1 0.0001/5 0.75]) ;

net.layers{end+1} = struct(...
    'name', sprintf('pool%d', id), ...
    'type', 'pool', ...
    'method', 'max', ...
    'pool', [3 3], ...
    'stride', 2, ...
    'pad', 0) ;

id = id + 1;
net.layers{end+1} = struct(...
    'name', sprintf('conv%d', id), ...
    'type', 'conv', ...
    'weights', {xavier(5, 5, 96, 256)}, ...
    'stride', 1, ...
    'pad', 2, ...
    'learningRate', [1 2], ...
    'weightDecay', [1 0]) ;
net.layers{end+1} = struct('type', 'relu', 'name', sprintf('relu%d',id)) ;

net.layers{end+1} = struct(...
    'name', sprintf('norm%d', id), ...
    'type', 'normalize', ...
    'param', [5 1 0.0001/5 0.75]) ;

net.layers{end+1} = struct(...
    'name', sprintf('pool%d', id), ...
    'type', 'pool', ...
    'method', 'max', ...
    'pool', [3 3], ...
    'stride', 2, ...
    'pad', 0) ;

id = id + 1;
net.layers{end+1} = struct(...
    'name', sprintf('conv%d', id), ...
    'type', 'conv', ...
    'weights', {xavier(3, 3, 256, 384)}, ...
    'stride', 1, ...
    'pad', 1, ...
    'learningRate', [1 2], ...
    'weightDecay', [1 0]) ;
net.layers{end+1} = struct('type', 'relu', 'name', sprintf('relu%d',id)) ;

id = id + 1;
net.layers{end+1} = struct(...
    'name', sprintf('conv%d', id), ...
    'type', 'conv', ...
    'weights', {xavier(3, 3, 384, 384)}, ...
    'stride', 1, ...
    'pad', 1, ...
    'learningRate', [1 2], ...
    'weightDecay', [1 0]) ;
net.layers{end+1} = struct('type', 'relu', 'name', sprintf('relu%d',id)) ;

id = id + 1;
net.layers{end+1} = struct(...
    'name', sprintf('conv%d', id), ...
    'type', 'conv', ...
    'weights', {xavier(3, 3, 384, 256)}, ...
    'stride', 1, ...
    'pad', 1, ...
    'learningRate', [1 2], ...
    'weightDecay', [1 0]) ;
net.layers{end+1} = struct('type', 'relu', 'name', sprintf('relu%d',id)) ;

net.layers{end+1} = struct(...
    'name', sprintf('pool%d', id), ...
    'type', 'pool', ...
    'method', 'max', ...
    'pool', [3 3], ...
    'stride', 2, ...
    'pad', 0) ;

id = id + 1;
net.layers{end+1} = struct(...
    'name', sprintf('fc%d', id), ...
    'type', 'conv', ...
    'weights', {xavier(6, 6, 256, 4096)}, ...
    'stride', 1, ...
    'pad', 0, ...
    'learningRate', [1 2], ...
    'weightDecay', [1 0]) ;
net.layers{end+1} = struct('type', 'relu', 'name', sprintf('relu%d',id)) ;

net.layers{end+1} = struct(...
    'type', 'dropout', ...
    'name', sprintf('dropout%d', id), ...
    'rate', 0.6) ;

id = id + 1;
net.layers{end+1} = struct(...
    'name', sprintf('fc%d', id), ...
    'type', 'conv', ...
    'weights', {xavier(1, 1, 4096, 4096)}, ...
    'stride', 1, ...
    'pad', 0, ...
    'learningRate', [1 2], ...
    'weightDecay', [1 0]) ;
net.layers{end+1} = struct('type', 'relu', 'name', sprintf('relu%d',id)) ;

net.layers{end+1} = struct(...
    'type', 'dropout', ...
    'name', sprintf('dropout%d', id), ...
    'rate', 0.6) ;

net.layers{end+1} = struct(...
    'name', 'prediction', ...
    'type', 'conv', ...
    'weights', {xavier(1, 1, 4096, 14*2)}, ...
    'stride', 1, ...
    'pad', 0, ...
    'learningRate', [1 2], ...
    'weightDecay', [1 0]) ;

% Consolidate the network, fixing any missing option
% in the specification above.

net = vl_simplenn_tidy(net) ;
